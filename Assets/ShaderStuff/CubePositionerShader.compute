#pragma kernel CSMain

float resolution;
float repetitions;
float time;

float rand(float2 co)
{
    return(frac(sin(dot(co.xy, float2(12.9898, 78.233))) * 43758.5453)) * 1;
}

struct Cube
{
    float3 position;
    float4 color;
};

RWStructuredBuffer<Cube> cubes;

[numthreads(10,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float xPos = id.x / resolution;
    Cube cube = cubes[id.x];
    for (int i = 0; i < 1; i++)
    {
        float speedoffset = rand(float2(xPos, 1));
        float zPos = 0.1 * sin(time * speedoffset + rand(float2(xPos, 1)));
        //float zPos = sin(time + 30 * xPos);

        cube.position.z = zPos;
        //float r = 0;
        //float b = 0;
        //float r = rand(float2(cube.color.r, cube.color.g));
        //float g = rand(float2(cube.color.g, cube.color.b));
        //float b = rand(float2(cube.color.b, cube.color.r));
        //cube.color = float4(r, g, b, 1.0);
    }
    cubes[id.x] = cube;
}
